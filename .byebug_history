c
basket_product_params
c
BasketProduct.total(all_items)
c
BasketProduct.total(all_items)
c
BasketProduct.total(all_items)
c
BasketProduct.total(all_items)
BasketProduct.total
all_items.total_quantity
BasketProduct.total_quantity
c
all_items.quantity
all_items
all_items[0]
all_items[0].quantitys
all_items[0].quantity
all_items.quantity
all_items
Product.where(id: all_items.ids)
Product.where(id: all_items.ids).price
Product.where(id: items.ids).price
BasketProduct.total(all_items)
c
Product.where(id: all_items.ids)
Product.where(all_items.ids)
Product.where all_items.ids
all_items.ids
Product.where(all_items.ids)
Product.where(all_items.ids).price
Product.where(items.ids).price
BasketProduct.total(all_items).to_i
BasketProduct.total(all_items.to_i)
BasketProduct.total(all_items)
c
BasketProduct.total(all_items.id)
BasketProduct.total(all_items)
c
BasketProduct.total(all_items)
BasketProduct.total(all_items[0])
BasketProduct.total(all_items).inspect
BasketProduct.total(all_items)
c
all_items.ids
all_items.id
all_items
BasketProduct.total(all_items)
BasketProduct.total
c
Product.find(bp.id).price
self.quantity
quantity
Product.find(bp.id).price
Product.find(bp.id)
bp = BasketProduct.first
BasketProduct.first
BasketProduct.total_price(all_items)
@client.basket.basket_products
c
@client.basket.basket_products
BasketProduct.total_price(all_items)
BasketProduct.total_price
c
all_items[0] = [:cost => 2]
all_items[0] = []
all_items[0] = [0]
all_items[0] = 1
all_items[0] += 1
all_items[0]
all_items[0][0]
all_items[0]
all_items[0] << 2
all_items[0]
all_items.merge({:cost => 2})
all_items[0].merge({:cost => 2})
all_items[0].merge {:cost => 2}
all_items[0] = {:cost => 2}
all_items[0][:cost] = 2
all_items[0] << :cost
all_items
Product.find(all_items[0][:products_id]).price
Product.find(all_items[0][:products_id])
all_items[0][:products_id]
all_items[0][:products_id].title
all_items[0][:products_id].product
all_items[0][:products_id]
all_items[0][:products_id.product]
all_items[0][:product_items]
c
all_items[0][:products_id.product]
all_items[0][:products_id]
all_items[0][:product_items]
all_items
BasketProduct.total_price(all_items[0])
BasketProduct.total_price(all_items)
all_items.total_price
all_times.total_price
c
BasketProduct.first.total
BasketProduct.first
all_items.total
total
all_items[0].total
all_items[0]
all_items
c
 @client.basket.basket_productsc
 @client.basket.basket_products
 @client.basket.basket_products[0]
 @client.basket.basket_products
 @client.basket.basket_products.count
 @client.basket.basket_products
 @client.basket.basket_products.all
 @client.basket.basket_products
 @client.basket
 @client
c
clear
@client.basket
@basket
@client
c
data.flattencc
data.flatten
data
data[0]["email"]
data["email"]
data[:email]
data = JWT.decode(session_client, ENV['SECRET'], true, algorithm: 'HS256')
    JWT.decode(session_client, ENV['SECRET'], true, algorithm: 'HS256')
session_client
c
JWT.decode(token, ENV['SECRET'], algorithm: 'HS256')
        JWT.decode(token, ENV['SECRET'], true, algorithm: 'HS256')
ENV['SECRET']
c
exit
JWT.decode(token, ENV['SECRET'])
JWT.decode(token)
token = auth_header.split(' ')[1]
token
JWT.decode(token)
auth_header
decoded_token
decoded_hash
c
@client
c
@client
c
JWT.decode(token, ENV['SECRET'], true, algorithm: 'HS256')
        JWT.decode(token, ENV['SECRET'], true, algorithm: 'HS256')
token = auth_header.split(' ')[1]
auth_header
c
current_client
current_ability
current_user
basket_products
@basket_products
@basket_product
params
c
params
product_params
c
product_params[:id]
params
Product.find(1)
Product.find(product_params[:id])
@product
c
product_params
c
product_params
params
PARAMS
c
@product.errors
@product.save
@product
c
self.id
self.client
@client
client
c
client_id
client
params
client
c
@product.subcategories
c
@subcategory.products
@subcategory.product
c
@product
c
@product.build_subcategory
@product
@product.subcategory
@product
@product.subcategory
@product.subcategor
@product.subcategory 
@product
c
token
c
token
c
token
req
c
new_token
token
c
req
token
new_token
req
c
jwt[0]["email"]
jwt[0]
jwt
jwt[0][:email]
jwt[:email]
jwt.flatten[:email]
jwt.flatten
jwt[0]
jwt
c
Client.find_by(email: client)
client
next
JWT.decode(auth_header.split(' ')[1], ENV['SECRET'], true, algorithm: 'HS256')
JWT.decode(token, ENV['SECRET'], true, algorithm: 'HS256')
auth_header.split(' ')[1]
token
auth_header
